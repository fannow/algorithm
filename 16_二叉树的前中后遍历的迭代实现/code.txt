//前序遍历
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) { 
           vector<int>v;
        if(root==NULL){
            return v;
        }
    
        stack<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode*root=q.top();
            q.pop();
			//每次都是将右节点先入栈左节点后入栈
			//这是确保后边确保左节点先出栈
			//等到root的左子树都遍历完时右节点在出栈
            v.push_back(root->val);
            if(root->right){
                q.push(root->right);
            }
            
            if(root->left){
                q.push(root->left);
            }
        }
        return v;

    }
};
//后序遍历
/*
后序遍历是在前序遍历的基础上修改一下逻辑就可以
让在入栈时先让左节点先入栈，再让右子节点入栈
这样就可以先遍历完root的右子树

*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) { 
           vector<int>v;
        if(root==NULL){
            return v;
        }
    
        stack<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode*root=q.top();
            q.pop();
			//每次都是将右节点先入栈左节点后入栈
			//这是确保后边确保左节点先出栈
			//等到root的左子树都遍历完时右节点在出栈
            v.push_back(root->val);
            if(root->right){
                q.push(root->right);
            }
            
            if(root->left){
                q.push(root->left);
            }
        }
        return v;

    }
};
//中序遍历