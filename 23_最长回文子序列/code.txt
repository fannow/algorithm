class Solution {
public:
    //区间ij结果依赖于区间[i+1,j-1]是不是回文串s[i]和s[j]相等就前边基础上+2就可以了因为一次多了两个字符  
    //s[i]和s[j]不相等就去区间[i+1,j] [i,j-1]区间回文串长度的最大值
    //因为都要区间i+1所以遍历顺序就要反省遍历
    int longestPalindromeSubseq(string s) {
        int n=s.size();
        vector<vector<int>> dp(s.size(),vector<int>(n,0));
        //初始化将同一个字符初始化为1
        for(int i=0;i<n;i++) dp[i][i]=1;
        //遍历
          for(int i=n-1;i>=0;i--){
              //因为已经初始化单字符情况了，所以j=i+1
              for(int j=i+1;j<n;j++){
                  //先判断字符i和字符j是不是相等
                  if(s[i]==s[j]){
                      dp[i][j]=dp[i+1][j-1]+2;
                  }else{
                      dp[i][j]=max(dp[i+1][j],dp[i][j-1]);
                  }
              }
          }
          return dp[0][n-1];

    }
};