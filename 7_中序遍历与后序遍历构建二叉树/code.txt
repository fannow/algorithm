/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int idx=0;
//后序遍历和中序遍历构建二叉树与前序遍历和中序遍历构建二叉树得构建过程基本类似
//只不过前序遍历是从前往后是根节点，而后序遍历是从后往前是根节点
    TreeNode*CreateTree(vector<int>&pre,vector<int>&vin){
        if(vin.empty()){
            return NULL;
        }
        //构建根节点
        TreeNode*root=new TreeNode(pre[idx]);
        
        int  mid=find(vin.begin(),vin.end(),pre[idx])-vin.begin(); 
          idx--;
        vector<int>v1(vin.begin()+mid+1,vin.end());
        root->right=CreateTree(pre,v1);  
        vector<int>v2(vin.begin(),vin.begin()+mid);
        root->left=CreateTree(pre,v2);
      
   
        return root;

    }
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
   
      idx=postorder.size()-1;
      return  CreateTree(postorder,inorder);

    }

    
};